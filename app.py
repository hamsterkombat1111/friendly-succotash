from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import sqlite3
import os
import json
from datetime import datetime
import logging

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_ADMIN_CHAT_ID = os.environ.get('TELEGRAM_ADMIN_CHAT_ID')

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
products = [
    {'id': 1, 'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1', 'price': 1000, 'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1'},
    {'id': 2, 'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2', 'price': 2000, 'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 2'},
    {'id': 3, 'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 3', 'price': 3000, 'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 3'}
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î)
def get_db_connection():
    if os.environ.get('VERCEL'):
        # –ù–∞ Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –≤ –ø–∞–º—è—Ç–∏
        return sqlite3.connect(':memory:', check_same_thread=False)
    else:
        return sqlite3.connect('orders.db', check_same_thread=False)

def init_db():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS orders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  product_id INTEGER,
                  product_name TEXT,
                  price INTEGER,
                  customer_name TEXT,
                  customer_email TEXT,
                  card_number TEXT,
                  status TEXT DEFAULT 'pending',
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  telegram_message_id INTEGER)''')
    conn.commit()
    conn.close()

init_db()

# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Vercel)
def send_telegram_notification(order_id, product_name, price, customer_name):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_ADMIN_CHAT_ID:
        print(f"Telegram notification would be sent: Order #{order_id} - {product_name} - {price} —Ä—É–±. - {customer_name}")
        return None
    
    try:
        import requests
        message = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\nID: #{order_id}\n–¢–æ–≤–∞—Ä: {product_name}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–ö–ª–∏–µ–Ω—Ç: {customer_name}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /approve_{order_id}\n–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_{order_id}"
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_ADMIN_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload)
        response_data = response.json()
        
        if response_data.get('ok'):
            return response_data['result']['message_id']
        return None
        
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
        return None

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    return render_template('index.html', products=products)

@app.route('/product/<int:product_id>')
def product_detail(product_id):
    product = next((p for p in products if p['id'] == product_id), None)
    if not product:
        return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return render_template('product.html', product=product)

@app.route('/checkout/<int:product_id>', methods=['GET', 'POST'])
def checkout(product_id):
    product = next((p for p in products if p['id'] == product_id), None)
    if not product:
        return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    if request.method == 'POST':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
        name = request.form.get('name')
        email = request.form.get('email')
        card_number = request.form.get('card_number')
        expiry_date = request.form.get('expiry_date')
        cvv = request.form.get('cvv')
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (—Ç–µ—Å—Ç–æ–≤–∞—è)
        if not all([name, email, card_number, expiry_date, cvv]):
            return render_template('checkout.html', product=product, error='–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        conn = get_db_connection()
        c = conn.cursor()
        c.execute('''INSERT INTO orders (product_id, product_name, price, customer_name, customer_email, card_number, status)
                     VALUES (?, ?, ?, ?, ?, ?, ?)''',
                 (product['id'], product['name'], product['price'], name, email, card_number[-4:], 'pending'))
        order_id = c.lastrowid
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        message_id = send_telegram_notification(order_id, product['name'], product['price'], name)
        
        if message_id:
            c.execute('UPDATE orders SET telegram_message_id = ? WHERE id = ?', (message_id, order_id))
            conn.commit()
        
        conn.close()
        
        session['order_id'] = order_id
        return redirect(url_for('payment_pending'))
    
    return render_template('checkout.html', product=product)

@app.route('/payment/pending')
def payment_pending():
    order_id = session.get('order_id')
    if not order_id:
        return redirect(url_for('index'))
    
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('SELECT status FROM orders WHERE id = ?', (order_id,))
    order = c.fetchone()
    conn.close()
    
    if order and order[0] != 'pending':
        return redirect(url_for('payment_result', status=order[0]))
    
    return render_template('payment_pending.html')

@app.route('/payment/result/<status>')
def payment_result(status):
    order_id = session.get('order_id')
    message = "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" if status == 'approved' else "–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    return render_template('payment_result.html', status=status, message=message, order_id=order_id)

# API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ Telegram
@app.route('/api/order/<int:order_id>/<action>')
def handle_order_action(order_id, action):
    if action not in ['approve', 'reject']:
        return jsonify({'error': 'Invalid action'}), 400
    
    conn = get_db_connection()
    c = conn.cursor()
    
    if action == 'approve':
        c.execute('UPDATE orders SET status = ? WHERE id = ?', ('approved', order_id))
        status = 'approved'
    else:
        c.execute('UPDATE orders SET status = ? WHERE id = ?', ('rejected', order_id))
        status = 'rejected'
    
    conn.commit()
    conn.close()
    
    return jsonify({'status': 'success', 'order_id': order_id, 'action': action})

# Health check –¥–ª—è Vercel
@app.route('/api/health')
def health_check():
    return jsonify({'status': 'ok', 'timestamp': datetime.now().isoformat()})

if __name__ == '__main__':
    app.run(debug=True)